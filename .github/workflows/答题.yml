name: 答题任务

on:
  schedule:
    - cron: '16 4 * * *' # UTC时间4:16，即北京时间12:16
  workflow_dispatch:

jobs:
  execute-questions:
    runs-on: ubuntu-latest
    env:
      # 请求设置
      API_URL: https://carbon-account-server.carbonstop.net/question/submit
      REQUEST_BODY: '[{"answerA":"合理保证就是保证数据是绝对准确的  ","correctAnswer":"A","updateTime":"2022-07-15 18:59:16","answerB":"合理保证说明数据是相对准确和可以信赖的","questionTitle":"关于保证等级说法不正确的是","answerC":"任何组织的温室气体核查都可要求作有限保证的评审","answerNum":0,"questionLabels":["001"],"delFlag":0,"answerD":"有限保证对数据的完整性做有限度的评审  ","id":351,"delFlag_name":"正常","questionType_name":"单选","createBy":0,"questionType":1,"answerE":null,"updateBy":0,"questionType_name_format":"单选","answerF":null,"createTime":"2022-07-15 18:54:26","answerG":null},{"answerA":"国际排放因子","correctAnswer":"B","updateTime":"2022-07-15 19:04:26","answerB":"相同工艺\/设备的经验系数获得的排放因子","questionTitle":"在核查过程中常用排放因子法来计算温室气体排放量，以下4类排放因子中，数据质量较高的是（ ）","answerC":"区域排放因子","answerNum":0,"questionLabels":["001"],"delFlag":0,"answerD":"设备制造商提供的系数获得的排放因子","id":316,"delFlag_name":"正常","questionType_name":"单选","createBy":0,"questionType":1,"answerE":null,"updateBy":0,"questionType_name_format":"单选","answerF":null,"createTime":"2022-07-15 18:54:26","answerG":null},{"answerA":"家用冰箱运行3天","correctAnswer":"C","updateTime":"2022-07-15 18:54:26","answerB":"普通电视机持续开1天","questionTitle":"1度电相当于(   ):","answerC":"25瓦的灯泡能连续点亮40小时","answerNum":0,"questionLabels":["001"],"delFlag":0,"answerD":"将20公斤的水烧开","id":406,"delFlag_name":"正常","questionType_name":"单选","createBy":0,"questionType":1,"answerE":null,"updateBy":0,"questionType_name_format":"单选","answerF":null,"createTime":"2022-07-15 18:54:26","answerG":null},{"answerA":"资源","correctAnswer":"A","updateTime":"2022-07-15 18:54:26","answerB":"污染","questionTitle":"通常认为垃圾是放错了地方的__________。","answerC":"废物","answerNum":0,"questionLabels":["001"],"delFlag":0,"answerD":null,"id":107,"delFlag_name":"正常","questionType_name":"单选","createBy":0,"questionType":1,"answerE":null,"updateBy":0,"questionType_name_format":"单选","answerF":null,"createTime":"2022-07-15 18:54:26","answerG":null},{"answerA":"解决好经济增长——能源消费——GHG减排的三角关系","correctAnswer":"A,B,C","updateTime":"2022-07-15 19:02:41","answerB":"调整能源消费结构的同时保障能源供应","questionTitle":"实现”30·60”目标需要直面的三大难题","answerC":"环境治理与减排不能给大众带来沉重的经济负担","answerNum":0,"questionLabels":["001"],"delFlag":0,"answerD":null,"id":550,"delFlag_name":"正常","questionType_name":"多选","createBy":0,"questionType":2,"answerE":null,"updateBy":0,"questionType_name_format":"多选","answerF":null,"createTime":"2022-07-15 18:54:26","answerG":null}]'
    
    steps:
      - name: 检出代码库
        uses: actions/checkout@v4
        
      - name: 读取用户配置
        run: |
          # 检查配置文件是否存在
          if [ ! -f "user-configs.json" ]; then
            echo "::error::配置文件 user-configs.json 不存在！"
            exit 1
          else
            echo "✅ 找到配置文件 user-configs.json"
            echo "📋 用户列表:"
            jq -r 'keys[]' user-configs.json
          fi
        
      - name: 执行答题任务
        run: |
          #!/bin/bash
          function execute_questions_for_user() {
            local user="$1"
            local token="$2"
            
            echo "▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄"
            echo "🔄 处理用户: $user"
            
            # 检查token是否为空
            if [ -z "$token" ] || [ "$token" = "null" ]; then
              echo "⚠️ 警告: $user 的appToken为空或未设置"
              return
            fi
            
            # 执行答题请求
            echo "🔍 请求详情:"
            #echo "  URL: $API_URL"
            #echo "  Token: $token"
            #echo "  Body: $REQUEST_BODY"
            
            # 使用 -w 添加响应后换行
            curl -s -w "\n" -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: $token" \
              -d "$REQUEST_BODY" \
              $API_URL
            
            # 再添加一个空行使格式更清晰
            echo
          }
          
          # 第一轮答题
          echo "➡️ 第1轮答题开始"
          while IFS='=' read -r user token; do
            execute_questions_for_user "$user" "$token"
          done < <(jq -r 'to_entries[] | "\(.key)=\(.value.appToken)"' user-configs.json)
          
          # 等待10秒后进行第二轮
          echo -e "\n🕒 等待10秒后进行第二轮答题...\n"
          sleep 10
          
          # 第二轮答题
          echo "➡️ 第2轮答题开始"
          while IFS='=' read -r user token; do
            execute_questions_for_user "$user" "$token"
          done < <(jq -r 'to_entries[] | "\(.key)=\(.value.appToken)"' user-configs.json)
          
          # 任务结束
          echo -e "\n🏁 答题任务已完成"
