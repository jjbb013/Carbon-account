name: 碳账户签到++

on:
  schedule:
    - cron: '1 1 * * *'  # UTC时间1:01，即北京时间9:01执行
  workflow_dispatch:

jobs:
  carbon-signin:
    runs-on: ubuntu-latest
    env:
      API_URL: https://carbon-account-server.carbonstop.net/task/complete
      REQUEST_BODY: '{"value":1,"sceneCode":"MRCJ0002","signMessage":"2c2b34840b8ec9fb735e1b2bed8533fa"}'
    
    steps:
      - name: 检出代码库（包含日志）
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录以便推送日志
          persist-credentials: true  # 保存凭证用于后续推送
        
      - name: 安装必要工具
        run: |
          sudo apt-get -qq install jq
          echo "工具安装完成"
        
      - name: 创建日志目录
        run: |
          log_dir="carbon-signin-logs"
          mkdir -p $log_dir
          echo "log_dir=$log_dir" >> $GITHUB_ENV
          echo "日志目录: $log_dir"
        
      - name: 处理用户签到
        id: signin
        run: |
          # 使用上海时区
          export TZ='Asia/Shanghai'
          
          # 准备日志文件
          report_file="carbon-signin-report.json"
          echo "[]" > $report_file
          
          # 创建原始响应目录
          raw_dir="$log_dir/raw-responses"
          mkdir -p $raw_dir
          
          # 处理每个用户
          jq -r 'keys[]' user-configs.json | while read -r user; do
            echo "▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄"
            echo "🔄 处理用户: $user"
            
            # 提取用户配置
            token=$(jq -r ".$user.appToken" user-configs.json)
            bark_url=$(jq -r ".$user.barkUrl" user-configs.json)
            
            # 检查token是否为空
            if [ -z "$token" ] || [ "$token" = "null" ]; then
              echo "⚠️ 警告: $user 的appToken为空或未设置"
              # 记录状态信息（上海时间）
              timestamp=$(date +'%Y-%m-%dT%H:%M:%S%z')
              status_data="{\"user\":\"$user\",\"timestamp\":\"$timestamp\",\"status\":\"error\",\"message\":\"appToken未设置\"}"
              jq --argjson data "$status_data" '. += [$data]' $report_file > temp.json && mv temp.json $report_file
              continue
            fi
            
            # 创建原始响应文件路径（带时间戳）
            raw_file="$raw_dir/${user}_$(date +'%Y%m%d_%H%M%S')_response.json"
            
            # 执行签到请求并记录完整响应
            echo "🔍 请求详情:"
            echo "  URL: $API_URL"
            echo "  Token: $token"
            echo "  Body: $REQUEST_BODY"
            
            response=$(curl -s -L -w "\nHTTP_CODE:%{http_code}" -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: $token" \
              -d "$REQUEST_BODY" \
              $API_URL | tee "$raw_file")
              
            http_code=${response##*HTTP_CODE:}
            json_content=${response%HTTP_CODE:*}
            
            # 保存原始响应
            echo "原始响应已保存至: $raw_file"
            echo "📡 原始响应内容:"
            echo "------------------------"
            cat "$raw_file"
            echo "------------------------"
            
            # 改进响应解析逻辑
            token_invalid=false
            if grep -q "token校验失败" "$raw_file" || 
               grep -q "\"code\":600" "$raw_file" || 
               grep -q "\"code\": 600" "$raw_file"; then
              token_invalid=true
            fi
            
            # 解析API响应
            code=$(echo $json_content | jq -r '.code? // empty' 2>/dev/null || echo "解析失败")
            msg=$(echo $json_content | jq -r '.msg? // empty' 2>/dev/null || echo "解析失败")
            
            # 记录状态信息（上海时间）
            timestamp=$(date +'%Y-%m-%dT%H:%M:%S%z')
            status_data="{\"user\":\"$user\",\"timestamp\":\"$timestamp\",\"httpStatus\":$http_code,\"apiCode\":\"$code\",\"apiMsg\":\"$msg\",\"tokenInvalid\":$token_invalid,\"rawFile\":\"$raw_file\"}"
            jq --argjson data "$status_data" '. += [$data]' $report_file > temp.json && mv temp.json $report_file
            
            # 检查token是否失效
            if $token_invalid; then
              echo "❌ 检测到Token失效: $user"
              
              # 发送个人通知
              if [[ -n "$bark_url" && "$bark_url" != "null" ]]; then
                echo "📤 发送Bark通知到: $user"
                curl -s -X POST \
                  -H 'Content-Type: application/json' \
                  -d "{\"title\":\"碳账户Token失效\",\"body\":\"$user 的Token已失效，请及时更新！\"}" \
                  "$bark_url"
              else
                echo "⚠️ 未找到$user的Bark URL，跳过通知"
              fi
            else
              echo "✅ 签到成功: $user"
            fi
            echo ""
          done
          
          # 将最终报告移动到日志目录
          mv $report_file $log_dir/
        
      - name: 显示执行摘要
        run: |
          echo "================================="
          echo "📊 用户签到执行摘要"
          echo "---------------------------------"
          jq -r '.[] | "用户: \(.user), 状态: \(if .tokenInvalid then "失败" else "成功" end), 时间: \(.timestamp), 原始文件: \(.rawFile)"' $log_dir/carbon-signin-report.json
          echo "================================="
        
      - name: 保存日志到仓库
        run: |
          # 设置提交者身份
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@users.noreply.github.com"
          
          # 添加日志文件
          git add $log_dir/*
          
          # 检查是否有文件要提交
          if git diff --cached --quiet; then
            echo "🟢 没有日志变更需要提交"
          else
            echo "📝 提交日志文件"
            git commit -m "添加碳账户签到日志 - $(date +'%Y%m%d_%H%M%S')"
            git push
          fi
        
      - name: 上传日志作为Artifact
        uses: actions/upload-artifact@v4
        with:
          name: carbon-signin-logs
          path: ${{ env.log_dir }}/
