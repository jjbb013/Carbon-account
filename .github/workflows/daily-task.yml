name: 碳账户签到

on:
  schedule:
    - cron: '1 1 * * *'  # UTC时间1:01，即北京时间9:01执行
  workflow_dispatch:

jobs:
  carbon-signin:
    runs-on: ubuntu-latest
    env:
      API_URL: https://carbon-account-server.carbonstop.net/task/complete
      REQUEST_BODY: '{"value":1,"sceneCode":"MRCJ0002","signMessage":"2c2b34840b8ec9fb735e1b2bed8533fa"}'
    
    steps:
      - name: 检出代码库
        uses: actions/checkout@v4
        
      - name: 安装必要工具
        run: sudo apt-get -qq install jq && echo "工具安装完成"
        
      - name: 检查配置文件
        run: |
          config_file="user-configs.json"
          if [ ! -f "$config_file" ]; then
            echo "::error::配置文件 $config_file 不存在！"
            exit 1
          else
            echo "✅ 找到配置文件 $config_file"
            echo "📋 用户列表:"
            jq -r 'keys[]' $config_file
          fi
        
      - name: 处理用户签到
        id: signin
        run: |
          # 准备状态报告文件
          report_file="token-status.json"
          echo "[]" > $report_file
          
          # 准备原始响应文件
          raw_dir="raw_responses"
          mkdir -p $raw_dir
          
          # 处理每个用户
          jq -r 'keys[]' user-configs.json | while read -r user; do
            echo "▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄"
            echo "🔄 处理用户: $user"
            
            # 提取用户配置
            token=$(jq -r ".$user.appToken" user-configs.json)
            bark_url=$(jq -r ".$user.barkUrl" user-configs.json)
            
            # 检查token是否为空
            if [ -z "$token" ] || [ "$token" = "null" ]; then
              echo "⚠️ 警告: $user 的appToken为空或未设置"
              # 记录状态信息
              timestamp=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
              status_data="{\"user\":\"$user\",\"timestamp\":\"$timestamp\",\"status\":\"error\",\"message\":\"appToken未设置\"}"
              jq --argjson data "$status_data" '. += [$data]' $report_file > temp.json && mv temp.json $report_file
              continue
            fi
            
            # 创建原始响应文件路径
            raw_file="$raw_dir/$user-raw-response.json"
            
            # 执行签到请求并记录完整响应
            echo "🔍 请求详情:"
            echo "  URL: $API_URL"
            echo "  Token: $token"
            echo "  Body: $REQUEST_BODY"
            
            response=$(curl -s -L -w "\nHTTP_CODE:%{http_code}" -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: $token" \
              -d "$REQUEST_BODY" \
              $API_URL | tee "$raw_file")
              
            http_code=${response##*HTTP_CODE:}
            json_content=${response%HTTP_CODE:*}
            
            # 保存原始响应
            echo "原始响应已保存至: $raw_file"
            
            # 打印原始响应内容
            echo "📡 原始响应内容:"
            echo "------------------------"
            cat "$raw_file"
            echo "------------------------"
            
            # 解析响应状态
            status=$(echo $json_content | jq -r '.status? // empty' 2>/dev/null || echo "解析失败")
            message=$(echo $json_content | jq -r '.message? // empty' 2>/dev/null || echo "解析失败")
            
            # 记录状态信息
            timestamp=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            status_data="{\"user\":\"$user\",\"timestamp\":\"$timestamp\",\"httpStatus\":$http_code,\"apiStatus\":\"$status\",\"message\":\"$message\",\"rawFile\":\"$raw_file\"}"
            jq --argjson data "$status_data" '. += [$data]' $report_file > temp.json && mv temp.json $report_file
            
            # 检查token是否失效
            if [[ "$message" == *"token校验失败"* || $http_code -eq 401 ]]; then
              echo "❌ 检测到Token失效: $user"
              
              # 发送个人通知
              if [[ -n "$bark_url" && "$bark_url" != "null" ]]; then
                echo "📤 发送Bark通知到: $user"
                curl -s -X POST \
                  -H 'Content-Type: application/json' \
                  -d "{\"title\":\"碳账户Token失效\",\"body\":\"$user 的Token已失效，请及时更新！\"}" \
                  "$bark_url"
              else
                echo "⚠️ 未找到$user的Bark URL，跳过通知"
              fi
            else
              echo "✅ 签到成功: $user"
            fi
            echo ""
          done
        
      - name: 显示执行摘要
        run: |
          echo "================================="
          echo "📊 用户签到执行摘要"
          echo "---------------------------------"
          jq -r '.[] | "用户: \(.user), 状态: \(if (.message | contains("token校验失败")) or .httpStatus == 401 then "失败" else "成功" end), 原始文件: \(.rawFile)"' token-status.json
          echo "================================="
        
      - name: 保存状态报告
        uses: actions/upload-artifact@v4
        with:
          name: carbon-signin-results-${{ github.run_id }}
          path: |
            token-status.json
            raw_responses/
